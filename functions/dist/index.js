"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.weeklyRecipeUpdate = void 0;
const firebase_functions_1 = require("firebase-functions");
const firebase_admin_1 = require("firebase-admin");
const firestore_1 = require("firebase-admin/firestore");
const utils_1 = require("./utils");
(0, firebase_admin_1.initializeApp)();
const db = (0, firestore_1.getFirestore)();
exports.weeklyRecipeUpdate = firebase_functions_1.scheduler.onSchedule('0 0 * * MON', async () => {
    const recipeSnapshot = await db.collection('/recipes').orderBy('lastCooked', 'desc').get();
    const recipesDoc = recipeSnapshot.docs.map((doc) => doc.data());
    const recipes = recipesDoc.filter((recipe) => recipe.tags.includes('EntrÃ©e'));
    const recipeMap = {};
    recipes.forEach((recipe) => {
        recipeMap[recipe.name] = recipe;
    });
    const LRURecipeDate = recipes[0].lastCooked;
    const LRURecipes = recipes.filter((recipe) => recipe.lastCooked.isEqual(LRURecipeDate));
    const randIndex = Math.floor(Math.random() * LRURecipes.length) ?? 0;
    const pickedRecipes = [(LRURecipes.at(randIndex) ?? LRURecipes[0]).name];
    const currentIngredients = (0, utils_1.proportionsToIngredientList)(recipeMap[pickedRecipes[0]].proportions);
    for (let i = 0; i < 6; i++) {
        const scores = recipes.map((recipe, index) => {
            let score = 0;
            let ingredientScore = 0;
            for (const prop of (0, utils_1.proportionsToIngredientList)(recipe.proportions)) {
                if (currentIngredients.includes(prop)) {
                    ingredientScore++;
                }
            }
            const dateScore = (recipe.lastCooked.toMillis() - (recipeMap[pickedRecipes[0]]?.lastCooked.toMillis() || 0)) / (1000 * 3600 * 24);
            let tagScore = 0;
            recipe.tags.forEach((tag) => {
                if ((0, utils_1.combineTags)(pickedRecipes, recipeMap).includes(tag))
                    tagScore++;
            });
            score = ingredientScore * 0.4 + dateScore * 0.4 + tagScore * 0.2;
            return [score, index];
        });
        scores.sort((a, b) => a[0] - b[0]);
        pickedRecipes.push(recipes[scores[0][1]].name);
        recipes.splice(scores[0][1], 1);
    }
    await db.doc('/website/weekly-recipes').update({
        recipes: pickedRecipes.map((recipe) => (0, utils_1.kebabCase)(recipe)),
    });
    const date = new Date();
    const timestamp = new firestore_1.Timestamp(date.getSeconds(), date.getMilliseconds());
    pickedRecipes.forEach(async (recipeName) => {
        await db.doc('/recipes/' + (0, utils_1.kebabCase)(recipeName)).update({
            lastCooked: timestamp,
        });
    });
});
//# sourceMappingURL=data:application/json;base64,