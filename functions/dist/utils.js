"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.kebabCase = exports.combineTags = exports.proportionsToIngredientList = void 0;
const COMMON_INGREDIENTS = [
    'garlic',
    'ginger',
    'salt',
    'salt and pepper',
    'pepper',
    'oil',
    'scallions',
    'onion',
    'cumin',
    'chilli powder',
    'chilli',
    'paprika',
    'cayenne',
    'water',
    'bell pepper',
    'corn starch',
    'sugar',
];
const isCommonIngredient = (ingredient) => {
    return COMMON_INGREDIENTS.some((ci) => ingredient.toLowerCase().includes(ci));
};
const proportionsToIngredientList = (proportions) => {
    if (!proportions)
        return [];
    const ingredientList = proportions.map((prop) => prop.ingredient);
    const filteredIngredientList = ingredientList.filter((ingredient) => isCommonIngredient(ingredient));
    return filteredIngredientList;
};
exports.proportionsToIngredientList = proportionsToIngredientList;
const combineTags = (recipes, recipeMap) => {
    const tags = [];
    recipes.forEach((recipe) => tags.push(...recipeMap[recipe]?.tags || []));
    return tags;
};
exports.combineTags = combineTags;
const kebabCase = (string) => string.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/[\s_]+/g, '-').toLowerCase();
exports.kebabCase = kebabCase;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBS0EsTUFBTSxrQkFBa0IsR0FBRztJQUN6QixRQUFRO0lBQ1IsUUFBUTtJQUNSLE1BQU07SUFDTixpQkFBaUI7SUFDakIsUUFBUTtJQUNSLEtBQUs7SUFDTCxXQUFXO0lBQ1gsT0FBTztJQUNQLE9BQU87SUFDUCxlQUFlO0lBQ2YsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLGFBQWE7SUFDYixhQUFhO0lBQ2IsT0FBTztDQUNSLENBQUM7QUFPRixNQUFNLGtCQUFrQixHQUFHLENBQUMsVUFBa0IsRUFBVyxFQUFFO0lBRXpELE9BQU8sa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDaEYsQ0FBQyxDQUFDO0FBT0ssTUFBTSwyQkFBMkIsR0FBRyxDQUFDLFdBQXFDLEVBQVksRUFBRTtJQUM3RixJQUFJLENBQUMsV0FBVztRQUFFLE9BQU8sRUFBRSxDQUFDO0lBRTVCLE1BQU0sY0FBYyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNsRSxNQUFNLHNCQUFzQixHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFFckcsT0FBTyxzQkFBc0IsQ0FBQztBQUNoQyxDQUFDLENBQUM7QUFQVyxRQUFBLDJCQUEyQiwrQkFPdEM7QUFRSyxNQUFNLFdBQVcsR0FBRyxDQUFDLE9BQWlCLEVBQUUsU0FBb0IsRUFBWSxFQUFFO0lBQy9FLE1BQU0sSUFBSSxHQUFhLEVBQUUsQ0FBQztJQUMxQixPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXpFLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDO0FBTFcsUUFBQSxXQUFXLGVBS3RCO0FBRUssTUFBTSxTQUFTLEdBQUcsQ0FBQyxNQUFjLEVBQVUsRUFBRSxDQUNsRCxNQUFNLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7QUFEdEUsUUFBQSxTQUFTLGFBQzZEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvcG9ydGlvbiwgUmVjaXBlTWFwIH0gZnJvbSAnLic7XHJcblxyXG4vKipcclxuICogTGlzdCBvZiBjb21tb24gaW5ncmVkaWVudHMgdGhhdCBjYW4gYmUgcmVtb3ZlZCB3aGlsZSBzaW1pbGFyaXR5IG1hdGNoaW5nXHJcbiAqL1xyXG5jb25zdCBDT01NT05fSU5HUkVESUVOVFMgPSBbXHJcbiAgJ2dhcmxpYycsXHJcbiAgJ2dpbmdlcicsXHJcbiAgJ3NhbHQnLFxyXG4gICdzYWx0IGFuZCBwZXBwZXInLFxyXG4gICdwZXBwZXInLFxyXG4gICdvaWwnLFxyXG4gICdzY2FsbGlvbnMnLFxyXG4gICdvbmlvbicsXHJcbiAgJ2N1bWluJyxcclxuICAnY2hpbGxpIHBvd2RlcicsXHJcbiAgJ2NoaWxsaScsXHJcbiAgJ3BhcHJpa2EnLFxyXG4gICdjYXllbm5lJyxcclxuICAnd2F0ZXInLFxyXG4gICdiZWxsIHBlcHBlcicsXHJcbiAgJ2Nvcm4gc3RhcmNoJyxcclxuICAnc3VnYXInLFxyXG5dO1xyXG5cclxuLyoqXHJcbiAqIERldGVybWluZyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgaW5ncmVkaWVudCBpcyBhIGNvbW1vbiBvbmUgb3Igbm90XHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbmdyZWRpZW50IGluZ3JlZGllbnQgdG8gY2hlY2tcclxuICogQHJldHVybiB7Ym9vbGVhbn1cclxuICovXHJcbmNvbnN0IGlzQ29tbW9uSW5ncmVkaWVudCA9IChpbmdyZWRpZW50OiBzdHJpbmcpOiBib29sZWFuID0+IHtcclxuICAvLyBDb252ZXJ0IHRvIGxvd2VyY2FzZSB0byBlbnN1cmUgY29uc2lzdGVuY3kgYW5kIGRvIGFuIGluY2x1ZGVzIHNpbmNlIGEgYmVsbCBwZXBwZXIgY2FuIGJlIG5hbWVkIGFzICd5ZWxsb3cgYmVsbCBwZXBwZXInXHJcbiAgcmV0dXJuIENPTU1PTl9JTkdSRURJRU5UUy5zb21lKChjaSkgPT4gaW5ncmVkaWVudC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGNpKSk7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29udmVydCBwcm9wb3J0aW9ucyBvYmplY3QgdG8gbGlzdCBvZiBcInVuY29tbW9uXCIgaW5ncmVkaWVudHMgbGlzdCB0byB1c2UgdG8gc2ltaWxhcml0eSBtYXRjaGluZ1xyXG4gKiBAcGFyYW0ge1Byb3BvcnRpb25bXX0gcHJvcG9ydGlvbnMgYXJyYXkgb2YgUHJvcG9ydGlvbnMgb2JqZWN0IHB1bGxlZCBmcm9tIGZpcmVzdG9yZSB0aGF0IHlvdSB3YW50IHRvIGNvbnZlcnRcclxuICogQHJldHVybiB7c3RyaW5nW119IE5hbWVzIG9mIFwidW5jb21tb25cIiBpbmdyZWRpZW50c1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHByb3BvcnRpb25zVG9JbmdyZWRpZW50TGlzdCA9IChwcm9wb3J0aW9uczogUHJvcG9ydGlvbltdIHwgdW5kZWZpbmVkKTogc3RyaW5nW10gPT4ge1xyXG4gIGlmICghcHJvcG9ydGlvbnMpIHJldHVybiBbXTtcclxuXHJcbiAgY29uc3QgaW5ncmVkaWVudExpc3QgPSBwcm9wb3J0aW9ucy5tYXAoKHByb3ApID0+IHByb3AuaW5ncmVkaWVudCk7XHJcbiAgY29uc3QgZmlsdGVyZWRJbmdyZWRpZW50TGlzdCA9IGluZ3JlZGllbnRMaXN0LmZpbHRlcigoaW5ncmVkaWVudCkgPT4gaXNDb21tb25JbmdyZWRpZW50KGluZ3JlZGllbnQpKTtcclxuXHJcbiAgcmV0dXJuIGZpbHRlcmVkSW5ncmVkaWVudExpc3Q7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29tYmluZSB0YWdzIGZvciBnaXZlbiByZWNpcGVzXHJcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJlY2lwZXNcclxuICogQHBhcmFtIHtSZWNpcGVNYXB9IHJlY2lwZU1hcFxyXG4gKiBAcmV0dXJuIHtzdHJpbmdbXX0gQ29tYmluZWQgdGFnc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGNvbWJpbmVUYWdzID0gKHJlY2lwZXM6IHN0cmluZ1tdLCByZWNpcGVNYXA6IFJlY2lwZU1hcCk6IHN0cmluZ1tdID0+IHtcclxuICBjb25zdCB0YWdzOiBzdHJpbmdbXSA9IFtdO1xyXG4gIHJlY2lwZXMuZm9yRWFjaCgocmVjaXBlKSA9PiB0YWdzLnB1c2goLi4ucmVjaXBlTWFwW3JlY2lwZV0/LnRhZ3MgfHwgW10pKTtcclxuXHJcbiAgcmV0dXJuIHRhZ3M7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3Qga2ViYWJDYXNlID0gKHN0cmluZzogc3RyaW5nKTogc3RyaW5nID0+XHJcbiAgc3RyaW5nLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csICckMS0kMicpLnJlcGxhY2UoL1tcXHNfXSsvZywgJy0nKS50b0xvd2VyQ2FzZSgpO1xyXG4iXX0=